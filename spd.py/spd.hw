#1.Given an array of integers, return indices of the two numbers such that they add up to a specific target.

#I may assume that each input would have exactly one solution, and I may not use the same element twice.

#Example:

#Given nums = [2, 7, 11, 15], target = 9,

#Because nums[0] + nums[1] = 2 + 7 = 9,
#return [0, 1]

def twoSum(self, nums, target):
        seen = {}
        for i, v in enumerate(nums):
            remaining = target - v
            if remaining in seen:
                return [seen[remaining], i]
            seen[v] = i
        return []




//#2. Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.

//#Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.


//Given nums = [0,0,1,1,1,2,2,3,3,4],

//Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.

//It doesn't matter what values are set beyond the returned length.

// nums is passed in by reference. (i.e., without making a copy)
//int len = removeDuplicates(nums);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
//for (int i = 0; i < len; i++) {
//    print(nums[i]);
//}




class Solution:
    def removeDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        len_ = 1
        if len(nums)==0:
            return 0
        for i in range(1,len(nums)):
            if nums[i] != nums[i-1]:
                nums[len_] = nums[i]
                len_ +=1
        return len_